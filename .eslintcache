[{"/Users/elzausufkulova/Projects/test-green-data/src/index.js":"1","/Users/elzausufkulova/Projects/test-green-data/src/App.js":"2","/Users/elzausufkulova/Projects/test-green-data/src/components/Toolbar/Toolbar.js":"3","/Users/elzausufkulova/Projects/test-green-data/src/components/Button/Button.js":"4","/Users/elzausufkulova/Projects/test-green-data/src/components/ListEmployees/ListEmployees.js":"5","/Users/elzausufkulova/Projects/test-green-data/src/redux/root-reducer.js":"6","/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/reducer.js":"7","/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/action-types.js":"8","/Users/elzausufkulova/Projects/test-green-data/src/components/EmployeeCard/EmployeeCard.js":"9","/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/actions.js":"10","/Users/elzausufkulova/Projects/test-green-data/src/helpers/employee.js":"11"},{"size":484,"mtime":1608996514653,"results":"12","hashOfConfig":"13"},{"size":520,"mtime":1610187336191,"results":"14","hashOfConfig":"13"},{"size":1517,"mtime":1610188497901,"results":"15","hashOfConfig":"13"},{"size":210,"mtime":1609184147962,"results":"16","hashOfConfig":"13"},{"size":1829,"mtime":1610188434947,"results":"17","hashOfConfig":"13"},{"size":148,"mtime":1608995815068,"results":"18","hashOfConfig":"13"},{"size":1596,"mtime":1610188434939,"results":"19","hashOfConfig":"13"},{"size":198,"mtime":1609065511762,"results":"20","hashOfConfig":"13"},{"size":5484,"mtime":1610188193668,"results":"21","hashOfConfig":"13"},{"size":472,"mtime":1609065511767,"results":"22","hashOfConfig":"13"},{"size":72,"mtime":1610188434943,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c7il7j",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/elzausufkulova/Projects/test-green-data/src/index.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/App.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/components/Toolbar/Toolbar.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/components/Button/Button.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/components/ListEmployees/ListEmployees.js",[],["48","49"],"/Users/elzausufkulova/Projects/test-green-data/src/redux/root-reducer.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/reducer.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/action-types.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/components/EmployeeCard/EmployeeCard.js",["50","51"],"import React from \"react\";\nimport './EmployeeCard.css';\nimport {connect} from \"react-redux\";\nimport {updateEmployee} from \"../../redux/empoyees/actions\";\n\nclass EmployeeCard extends React.Component{\n    render () {\n        const employees = this.props.employees;\n        const selectedId = this.props.selectedId;\n        const employee = employees.find(e => e.id === selectedId);\n        if (!employee) {\n            return null;\n        }\n        return (\n            <div className=\"employeeCard\">\n                <form className=\"employeeCard__form\">\n                    <label className=\"employeeCard__name\">\n                        ФИО<sup>*</sup>\n                        <br/>\n                        <input required\n                               type=\"text\"\n                               value={employee.name}\n                               onChange={(e) => this.props.updateEmployee({...employee, name: e.target.value})}\n                        />\n                    </label>\n                    <br/>\n                    <label className=\"employeeCard__position\">\n                        Должность<sup>*</sup>\n                        <br/>\n                        <select\n                            value={employee.position}\n                            required\n                            onChange={(e) => this.props.updateEmployee({...employee, position: e.target.value})}\n                        >\n                            <option disabled value=\"\">Выберите должность</option>\n                            <option value=\"Директор\">Директор</option>\n                            <option value=\"Заместитель директора\">Заместитель директора</option>\n                            <option value=\"Разработчик\">Разработчик</option>\n                            <option value=\"Уборщик\">Уборщик</option>\n                            <option value=\"Юрист\">Юрист</option>\n                        </select>\n                    </label>\n                    <br/>\n                    <label className=\"employeeCard__birthdate\">\n                        Дата рождения\n                        <br/>\n                        <input\n                            type=\"date\"\n                            min=\"1920-01-01\"\n                            max=\"2006-12-31\"\n                            value={employee.birthdate}\n                            onChange={(e) => this.props.updateEmployee({...employee, birthdate: e.target.value})}\n                        />\n                    </label>\n                    <br/>\n                    <label className=\"employeeCard__sex\">\n                        Пол\n                        <br/>\n                        <label>\n                            <input checked={employee.sex === \"Мужчина\"}\n                                   name=\"sex\"\n                                   type=\"radio\"\n                                   value=\"Мужчина\"\n                                   onChange={(e) => this.props.updateEmployee({...employee, sex: e.target.value})}\n                            />\n                            Мужской\n                        </label>\n                        <br/>\n                        <label><input\n                            checked={employee.sex === \"Женщина\"}\n                            name=\"sex\"\n                            type=\"radio\"\n                            value=\"Женщина\"\n                            onChange={(e) => this.props.updateEmployee({...employee, sex: e.target.value})}\n                        />\n                            Женский\n                        </label>\n                    </label>\n                    <br/>\n                    <label className=\"employeeCard__isFired\">\n                        Уволен\n                        <input\n                            type=\"checkbox\"\n                            checked={employee.isFired}\n                            onChange={(e) => this.props.updateEmployee({...employee, isFired: e.target.checked})}\n                        />\n                    </label>\n                    {/*<br/>*/}\n                    {/*<label className=\"employeeCard__colleagues\">*/}\n                    {/*    Коллеги*/}\n                    {/*    <br/>*/}\n                    {/*    <select*/}\n                    {/*        multiple*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*            const selected = Array.from(e.target.options).filter(option => option.selected).map(o => +o.value)*/}\n                    {/*            setEditedEmployee({...editedEmployee, colleagues: selected})*/}\n                    {/*        }}>*/}\n                    {/*        <option disabled value=\"\">Выберите коллег</option>*/}\n                    {/*        {employees.map(employee => (*/}\n                    {/*            <option value={employee.id}>{employee.name}</option>*/}\n                    {/*        ))}*/}\n                    {/*    </select>*/}\n                    {/*</label>*/}\n                </form>\n            </div>\n        )\n    }\n}\n\nexport const EmployeeCardConnected = connect(\n    state => ({\n        employees: state.employees.all,\n        selectedId: state.employees.selectedId\n    }),\n    dispatch => ({\n        updateEmployee: (employee) => dispatch((updateEmployee(employee)))\n    })\n)(EmployeeCard)","/Users/elzausufkulova/Projects/test-green-data/src/redux/empoyees/actions.js",[],"/Users/elzausufkulova/Projects/test-green-data/src/helpers/employee.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":5,"column":9,"nodeType":"58","messageId":"59","endLine":5,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":8,"column":5,"nodeType":"62","messageId":"63","endLine":11,"endColumn":6},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'employees' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]